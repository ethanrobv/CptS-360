
             LAB3pre Work: Processes in an OS Kernel
                     DUE: 9-23-2021
       Answer questions below. Submit a (text-edit) file to TA
	     
1. READ List: Chapter 3: 3.1-3.5

What's a process? (Page 102)
	A: A process is the execution of an image, an instance of a program.
	     
Each process is represented by a PROC structure.
Read the PROC structure in 3.4.1 on Page 111 and answer the following questions:

What's the meaning of:
   pid, ppid? PID is the process's identification number, while PPID is that process's parent's identification number.
   status   ? Status is meant to signify whether a given processes is available or not.
   priority ? Priority signifies when a process should be selected to execute a task (i.e., higher priority -> that process will be selected before one with lower priority).
   event    ? A value which a process "sleeps" on and subsequently "awakes" on. E.g., if specific resources are unavailable, a process will sleep until said resources are freed up.
   exitCode ? The exit value of a process when it terminates.

READ 3.5.2 on Process Family Tree. What are the
   PROC pointers child, sibling, parent used for? 
   	These pointers are used to form a binary tree structure which allows for related processes (e.g. a parent process) to be easily identified.
	     
2. Download samples/LAB3pre/mtx. Run it under Linux.
   MTX is a multitasking system. It simulates process operations in a
   Unix/Linux kernel, which include
              fork, exit, wait, sleep, wakeup, process switching

	     
/*********** A Multitasking System ************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "type.h"    // PROC struct and system constants
	
// global variables:
PROC proc[NPROC], *running, *freeList, *readyQueue, *sleepList; 

running    = pointer to the current running PROC
freeList   = a list of all FREE PROCs
readyQueue = a priority queue of procs that are READY to run
sleepList  = a list of SLEEP procs, if any.

Run mtx. It first initialize the system, creates an initial process P0.
P0 has the lowest priotiry 0, all other processes have priority 1

Ater initialization,
     P0 forks a child prcoess P1, switch process to run P1.

                The display looks like the following
-----------------------------------------------------------------------------
Welcome to KCW's Multitasking System
1. init system
freeList = [0 0]->[1 0]->[2 0]->[3 0]->[4 0]->[5 0]->[6 0]->[7 0]->[8 0]->NULL

2. create initial process P0
init complete: P0 running

3. P0 fork P1 : enter P1 into readyQueue
	     
4. P0 switch process to run P1
   P0: switch task
   proc 0 in scheduler()
   readyQueue = [1 1]->[0 0]->NULL
   next running = 1
   proc 1 resume to body()

proc 1 running: Parent=0 childList = NULL
freeList  = [2 0]->[3 0]->[4 0]->[5 0]->[6 0]->[7 0]->[8 0]->NULL
readQueue = [0 0]->NULL
sleepList = NULL
input a command: [ps|fork|switch|exit|sleep|wakeup|wait] : 
----------------------------------------------------------------------------
5.                     COMMANDS:

ps     : display procs with pid, ppid, status; same as ps in Unix/Linux

fork   : READ kfork()   on Page 109: What does it do? kfork() creates a child process and puts it in the ready queue. 

switch : READ tswitch() on Page 108: What does it do? tswitch() saves the stack pointer to the current task and then switches the current 
running process to a new one from the ready queue (chosen by priority).

exit   : READ kexit()   on Page 112: What does it do? kexit() stops the running process, disposes of its children, records the process's exit value,
turns the respective process into a zombie (does not free it), then wakes up its parent.
         
sleep  : READ ksleep()  on Page 111: What does it do? ksleep() stops the process until required space, resources, etc. becomes available.

wakeup : READ kwakeup() on Page 112: What does it do? kwakeup() resumes a sleeping task given an event value.
	     
wait   : READ kwait()   on Page 114: What does it do? kwait() searches a process for zombie children, collects their PIDs and exit codes, then frees the zombie processes.
---------------------------------------------------------------------------

------------------------ TEST REQUIREMENTS ---------------------------------
6. Step 1: test fork
While P1 running, enter fork: What happens? Process 2 is added to P1's child list. P2 is removed from the free list and placed into the ready queue.

Enter fork many times; 
      How many times can P1 fork? P1 can fork seven times. WHY? This is because we have allocated a finite amount of processes in our array (8).

Enter Control-c to end the program run.


7. Step 2: Test sleep/wakeup
Run mtx again.
While P1 running, fork a child P2;
Switch to run P2. Where did P1 go? P1 went to the ready queue with a priority of 1. WHY? This occurred because we
forked a child (created P2, whose parent is P1), then asked the program to stop running P1 and start running P2.

P2 running : Enter sleep, with a value, e.g.123 to let P2 SLEEP.
What happens? P2 was moved to the sleep list with event value 0x7b. P1 started running again. WHY? This occurred because
we asked P2 to sleep, thus a new process was taken from the ready queue (which only had P1) and ran.

Now, P1 should be running. Enter wakeup with a value, e.g. 234
Did any proc wake up? No. WHY? We asked P2 to sleep with an event value 123, so to wake it up we would have to 
enter the same event value. There is no process in the sleep queue with event value 234.

P1: Enter wakeup with 123
What happens? P2 was woken up and placed in the ready queue. WHY? P2 was told to sleep with event value 123, thus 
when we wakeup the same value, P2 is woken up. It can now be used to execute a new disk image thus it is placed in the ready queue.


8. Step 3: test child exit/parent wait
	     
When a proc dies (exit) with a value, it becomes a ZOMBIE, wakeup its parent.
Parent may issue wait to wait for a ZOMBIE child, and frees the ZOMBIE

Run mtx;
P1: enter wait; What happens? Nothing. WHY? P1 has no children. 

CASE 1: child exit first, parent wait later

P1: fork a child P2, switch to P2.
P2: enter exit, with a value, e.g. 123 ==> P2 will die with exitCode=123.
Which process runs now? P1. WHY? It was the first process in the ready queue.
enter ps to see the proc status: P2 status = ZOMBIE

(P1 still running) enter wait; What happens? 1 ZOMBIE child was found (P2) and the exitValue was returned. 
                   enter ps;   What happened to P2? After wait, P2 was freed and placed at the end of free list.

CASE 2: parent wait first, child exit later

P1: enter fork to fork a child P3
P1: enter wait;  What happens to P1? P1 is put to sleep, placed in the sleep list with a certain event value. WHY? P1 is waiting for children to die.
P3: Enter exit with a value; What happens? P1 was woken up and placed in ready queue, P3 was freed and placed in free list, P1 resumed running.
P1: enter ps;  What's the status of P3? P3 is now free. WHY? We already asked P1 to wait for any of its children to become ZOMBIE, thus when P3 died P1 was woken up and
P3 was freed.
	     
9. Step 4: test Orphans
	     
When a process with children dies first, all its children become orphans.
In Unix/Linux, every process (except P0) MUST have a unique parent.
So, all orphans become P1's children. Hence P1 never dies.

Run mtx again.
P1: fork child P2, Switch to P2.
P2: fork several children of its own, e.g. P3, P4, P5 (all in its childList).
P2: exit with a value. 
P1 should be running WHY? P1 is now running because prior to forking all of P2's children, P1 was already in the ready queue. Thus, it is still the first to leave
once a new process can run.
P1: enter ps to see proc status: which proc is ZOMBIE? P2 is ZOMBIE.
What happened to P2's children? P2's children were given to P1. This is standard procedure in a Unix-like system, as P1 inherits a PROC's children should it die before they do.
P1: enter wait; What happens? P1 searches its child list for ZOMBIE children and found one (P2). It returned P2's exitValue then freed it (placing it at the back of free list).
P1: enter wait again; What happens? P1 was put to sleep with a certain event value. P3 began to run. WHY? We asked P1 to go to sleep until one of its children dies and becomes
ZOMBIE. P3 was the first PROC in readyqueue which is the reason it started running.

How to let P1 READY to run again? To let P1 run again we would need to exit P3 and make it ZOMBIE. Then we would need to switch or kill tasks until P1 is at the front of ready queue and can
be switched to or until it the only available task to run.



  
